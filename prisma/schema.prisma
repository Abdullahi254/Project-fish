// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Batch {
  id             Int      @id @default(autoincrement())
  batchDate      DateTime
  type           String
  totalWaterLoss Float?
  estimatedLoss  Float?
  pricePerKilo   Float
  records        Record[]
}

model Record {
  id         Int    @id @default(autoincrement())
  weight     Float
  weightSold Float
  remaining  Float
  waterLoss  Float
  batch      Batch  @relation(fields: [batchId], references: [id])
  batchId    Int
  sold       Sold[]

  @@index([batchId])
}

model Sold {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  quantity Float
  record   Record   @relation(fields: [recordId], references: [id])
  recordId Int

  @@index([recordId])
}

model Client {
  id           Int           @id @default(autoincrement())
  first        String
  last         String
  phoneNumber  String
  totalDebit   Float?
  totalCredit  Float?
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  clientId    Int
  client      Client   @relation(fields: [clientId], references: [id])
  debit       Float?
  credit      Float?
  debtBalance Float
  pricePerKG  Float?
  quantity    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
}
